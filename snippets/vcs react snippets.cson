'.source.js, .source.jsx':
  '{ input }':
    'prefix': 'rcb'
    'body': '{ ${1} }'

  '{ input } (hit tab when rcb shows)':
    'prefix': 'cc'
    'body': 'rcb'

  'stateless functional component':
    'prefix': 'rfc'
    'body': """
    import React from 'react'
    import PropTypes from 'prop-types'

    const ${1:MyComponent} = () => {
      return (

      )
    }

    ${1:MyComponent}.propTypes = {
      $2
    }

    ${1:MyComponent}.defaultPropTypes = {
      $3
    }

    ${1:MyComponent}.displayName = '${1:MyComponent}'

    export default ${1:MyComponent}
    """

  'stateless functional component, without props (cleaner)':
    'prefix': 'rfcc'
    'body': """
    import React from 'react'

    const ${1:MyComponent} = () => {
      return (

      )
    }

    ${1:MyComponent}.displayName = '${1:MyComponent}'

    export default ${1:MyComponent}
    """

  'classful component':
    'prefix': 'rcc'
    'body': """
    import React, { Component } from 'react'
    import PropTypes from 'prop-types'

    class ${1:MyComponent} extends Component {
      static propTypes = {
        ${2}
      }

      static defaultProps = {
        ${3}
      }

      state = {}

      render() {
        return (

        )
      }
    }

    export default ${1:MyComponent}
    """

  'classful component without proptypes (more clean)':
    'prefix': 'rccc'
    'body': """
    import React, { Component } from 'react'

    class ${1:MyComponent} extends Component {
      state = {}

      render() {
        return (

        )
      }
    }

    export default ${1:MyComponent}
    """

  'component will mount':
    'prefix': 'rwm'
    'body': """
    componentWillMount() {
      ${1}
    }
    """

  'component did mount':
    'prefix': 'rdm',
    'body': """
      componentDidMount() {
        ${1}
      }
    """

  'component will update':
    'prefix': 'rwu'
    'body': """
    componentWillUpdate() {
      ${1}
    }
    """

  'component did update':
    'prefix': 'rdu'
    'body': """
    componentDidUpdate() {
      ${1}
    }
    """

  'component will receive props':
    'prefix': 'rwr'
    'body': """
    componentWillReceiveProps(nextProps) {
      ${1}
    }
    """

  'component should update':
    'prefix': 'rsw'
    'body': """
    shouldComponentUpdate(nextProps, nextState) {
      ${1}
    }
    """

  'import statement with curly braces':
    'prefix': 'rim'
    'body': 'import { $1 } from \'${2}\''

  'import statement without curly braces':
    'prefix': 'ri'
    'body': 'import $1 from \'${2}\''

  'import ReactDom statement':
    'prefix': 'rid'
    'body': 'import ReactDom from \'react-dom\''

  'import React Native statement':
    'prefix': 'rin'
    'body': 'import { $1 } from \'react-native\''

  'import PropTypes':
    'prefix': 'rip'
    'body': 'import PropTypes from \'prop-types\''

  'import PropTypes, with destructuring':
    'prefix': 'ripd'
    'body': 'import { $1 } from \'prop-types\''

  'import styled-components':
    'prefix': 'ris'
    'body': 'import styled from \'styled-components\''

  'react this.props':
    'prefix': 'rtp'
    'body': 'this.props.${1}'

  'react Component.propTypes':
    'prefix': 'rpt'
    'body': """
    ${1:MyComponent}.propTypes = {
      ${2}
    }
    """

  'react default Component.propTypes':
    'prefix': 'rdpt'
    'body': """
    ${1:MyComponent}.defaultProps = {
      ${2}
    }
    """

  'react this.state':
    'prefix': 'rts'
    'body': 'this.state.${1}'

  'react setState':
    'prefix': 'rsst'
    'body': 'this.setState($1)'

  'const styles object':
    'prefix': 'rst'
    'body': """
    const styles = {
      ${1:key}: {
        ${2}
      },
    }
    """

  'const styled component':
    'prefix': 'rsc'
    'body': """
    const ${1:StyledComponent} = styled.${2:tag}\`
      ${3:key}: ${4:value};
    \`
    """

  'destructuring of styles':
    'prefix': 'rdst'
    'body': 'const { $1 } = styles'

  'destructuring of state':
    'prefix': 'rds'
    'body': 'const { $1 } = this.state'

  'destructuring of proptypes':
    'prefix': 'rdp'
    'body': 'const { $1 } = this.props'

  'redux action\'s constant declaration':
    'prefix': 'rxac'
    'body': """
      export const ${1:CONSTANT_NAME} = '$1'
    """
